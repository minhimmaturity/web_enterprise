generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  name               String
  email              String               @unique
  password           String
  createAt           DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  role               Role
  is_locked          Boolean              @default(false)
  default_pasword    String
  avatar             String
  FacultyId          String?
  Admin              Admin?
  Comment            Comment[]
  Contribution       Contribution[]
  Conversation       Conversation[]       @relation("CreatedBy")
  Message            Message[]
  Notification       Notification[]
  Faculty            Faculty?             @relation(fields: [FacultyId], references: [id], onDelete: Cascade)
  UserOnConservation UserOnConservation[]
}

model Admin {
  id           String         @id @default(uuid())
  userId       String         @unique
  createAt     DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  AcademicYear AcademicYear[]
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  faculty      Faculty[]
}

model Faculty {
  id        String   @id @default(uuid())
  name      String   @unique()
  createBy  String
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  Admin     Admin    @relation(fields: [createBy], references: [id])
  User      User[]
}

model Conversation {
  id                  String               @id @default(uuid())
  createAt            DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  userId              String?
  createBy            User?                @relation("CreatedBy", fields: [userId], references: [id])
  messages            Message[]
  userOnConversations UserOnConservation[]
}

model UserOnConservation {
  userId         String
  conversationId String
  createAt       DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: NoAction)
  user           User         @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@id([userId, conversationId])
}

model Message {
  id             String       @id @default(uuid())
  text           String
  conversationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AcademicYear {
  id                 String         @id @default(uuid())
  closure_date       DateTime
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  adminId            String
  final_closure_date DateTime
  admin              Admin          @relation(fields: [adminId], references: [id], onDelete: Cascade)
  Contribution       Contribution[]
}

model Contribution {
  id             String         @id @default(uuid())
  title          String
  description    String
  is_disabled    Boolean        @default(false)
  is_choosen     Boolean        @default(false)
  userId         String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  is_public      Boolean        @default(false)
  AcademicYearId String
  Comment        Comment[]
  AcademicYear   AcademicYear   @relation(fields: [AcademicYearId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  Documents      Documents[]
  Image          Image[]
  Notification   Notification[]
}

model Image {
  id             String       @id @default(uuid())
  name           String
  path           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  contributionId String
  contribution   Contribution @relation(fields: [contributionId], references: [id], onDelete: Cascade)
}

model Notification {
  id             String       @id @default(uuid())
  content        String
  contributionId String
  userId         String?
  contribution   Contribution @relation(fields: [contributionId], references: [id], onDelete: Cascade)
  user           User?        @relation(fields: [userId], references: [id])
}

model Documents {
  id             String       @id @default(uuid())
  name           String
  path           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  contributionId String
  contribution   Contribution @relation(fields: [contributionId], references: [id], onDelete: Cascade)
}

model Comment {
  id             String       @id @default(uuid())
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         String
  contributionId String
  contribution   Contribution @relation(fields: [contributionId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  STUDENT
  ADMIN
  COORDIONATOR
  MANAGER
  GUEST
}
