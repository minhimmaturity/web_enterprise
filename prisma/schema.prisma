// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  ADMIN
  COORDIONATOR
  MANAGER
}

model User {
  id                 String               @id @default(uuid())
  name               String
  email              String               @unique
  password           String
  createAt           DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  role               Role
  is_locked          Boolean              @default(false)
  avatar             String
  default_pasword    String
  Admin              Admin?
  Conservation       Conversation[]
  UserOnConservation UserOnConservation[]
  Message            Message[]
  Contribution       Contribution[]
  Notification       Notification[]
  Comment            Comment?
}

model Admin {
  id           String         @id @default(uuid())
  userId       String         @unique
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  faculty      Faculty[]
  createAt     DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  AcademicYear AcademicYear[]
}

model Faculty {
  id           String         @id @default(uuid())
  name         String
  Admin        Admin          @relation(fields: [createBy], references: [id], onDelete: Cascade)
  createBy     String
  createAt     DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Contribution Contribution[]
}

model Conversation {
  id                 String               @id @default(uuid())
  user               User[]
  createAt           DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  UserOnConservation UserOnConservation[]
  Message            Message[]
}

model UserOnConservation {
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  Conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  createAt       DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@id([userId, conversationId])
}

model Message {
  id             String       @id @default(uuid())
  text           String
  sender         User         @relation(fields: [userId], references: [id]) // Reference the user who sent the message
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         String
}

model AcademicYear {
  id                 String   @id @default(uuid())
  closure_date       DateTime
  final_closure_date DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  admin              Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId            String
}

model Contribution {
  id           String        @id @default(uuid())
  title        String
  description  String
  close_date   DateTime
  is_disabled  Boolean       @default(false)
  is_choosen   Boolean       @default(false)
  is_public    Boolean       @default(false)
  faculty      Faculty       @relation(fields: [facultyId], references: [id])
  facultyId    String
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Image        Image[]
  Documents    Documents[]
  Notification Notification?
  Comment      Comment[]
}

model Image {
  id             String       @id @default(uuid())
  name           String
  path           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  contribution   Contribution @relation(fields: [contributionId], references: [id])
  contributionId String
}

model Notification {
  id             String       @id @default(uuid())
  content        String
  contribution   Contribution @relation(fields: [contributionId], references: [id])
  contributionId String       @unique
  userId         String
  user           User         @relation(fields: [userId], references: [id])
}

model Documents {
  id             String       @id @default(uuid())
  name           String
  path           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  contribution   Contribution @relation(fields: [contributionId], references: [id])
  contributionId String
}

model Comment {
  id             String       @id @default(uuid())
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @unique
  contribution   Contribution @relation(fields: [contributionId], references: [id])
  contributionId String
}
